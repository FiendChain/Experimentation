from abc import ABC, abstractmethod, abstractproperty

from .FormInput import FormInput, NO_DEFAULT

class FormBuilder(ABC):
    """
    Description:
        Builds the Form class via its declared FormInput attributes
    Attributes:
        _base: Base class to build from
        formInputs: Dict used to map form field name to the appropriate FormInput object
    """
    _base = None

    def __init__(self, *args, **kwargs):
        self.formInputs = {}
        self.getBase()
        self.getFormInputs()
        self.ignoreList = [None]

    def getBase(self):
        """
        Gets base type
        """
        self._base = type(self)

    def getFormInputs(self):
        """
        Scans the base class for FormInput instances to build the form
        Appends the instances to self.formInputs
        """
        for key in self._base.__dict__:
            value = getattr(self._base, key)
            if isinstance(value, FormInput):
                self.formInputs.setdefault(value.name, value)

    def readForm(self, form):
        """
        Description:
            Reads form from website and converts it to dict with proper types
            E.g. A date field will be turned into a datetime object
        Args:
            form: website form to be read
        Returns:
            the converted form with proper types
        Raises:
            KeyError: missing key from form
            ...: Errors generated by FormInput objects while looping
            ...: Errors generated by self.checkReadFormResult when analysing final converted form
                 self.checkReadFormResult(form) has its defined behaviour in the child class
        """
        convertedForm = {}
        for key, formInput in self.formInputs.items():
            string = form.get(key, None)
            # get value based on string
            if not string:
                value = formInput.default
            else:
                value = formInput.convertStringToValue(string)
            if value is NO_DEFAULT:
                raise KeyError('Missing required field \"{}\"'.format(key))
            convertedForm.setdefault(key, value)
        self.checkReadFormResult(convertedForm)
        return convertedForm

    def checkReadFormResult(self, form):
        """
        Description:
            Do extra stuff with the form from website if necessary
        Args:
            form: website form after conversion from string
        Raises:
            Any exception that is defined
        """
        return